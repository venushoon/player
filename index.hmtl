<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>웹 TV 플레이어 (M3U 플레이리스트)</title>

    <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />

    <style>
        /* 기본 페이지 스타일 */
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            margin: 0;
            height: 100vh;
            overflow: hidden;
        }

        /* 메인 레이아웃 (Flexbox) */
        .main-container {
            display: flex;
            height: 100vh;
            width: 100vw;
        }

        /* 왼쪽: 비디오 플레이어 영역 */
        .player-wrapper {
            flex: 3; /* 3:1 비율 */
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #000;
            padding: 1rem;
            box-sizing: border-box;
        }

        /* 오른쪽: 플레이리스트 영역 */
        .playlist-wrapper {
            flex: 1;
            background-color: #1e1e1e;
            overflow-y: auto; /* 목록이 길면 스크롤 */
            padding: 1rem;
            border-left: 2px solid #333;
            box-sizing: border-box;
        }

        .playlist-title {
            margin: 0 0 1rem 0;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #444;
            font-size: 1.2rem;
            color: #fff;
        }
        
        #playlist {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #playlist li {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 0.8rem 0.5rem;
            cursor: pointer;
            border-bottom: 1px solid #2c2c2c;
            transition: background-color 0.2s ease;
        }

        #playlist li:hover {
            background-color: #333;
        }
        
        #playlist li.active {
            background-color: #00bfff;
            color: #000;
            font-weight: bold;
        }

        .channel-logo {
            width: 40px;
            height: auto;
            border-radius: 4px;
            background-color: #2c2c2c;
        }

        /* Plyr 플레이어 커스텀 */
        :root {
            --plyr-color-main: #00bfff;
        }
    </style>
</head>
<body>

    <div class="main-container">
        <div class="player-wrapper">
            <video id="player" playsinline controls></video>
        </div>
        <div class="playlist-wrapper">
            <h2 class="playlist-title">📺 채널 목록</h2>
            <ul id="playlist"></ul>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/dashjs@latest/dist/dash.all.min.js"></script>
    <script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const video = document.getElementById('player');
            const playlistElement = document.getElementById('playlist');

            // 업로드된 alive.m3u 파일의 내용입니다.
            const m3uContent = `
#EXTM3U
#EXTINF:-1 tvg-id="SPOTV" tvg-name="SPOTV" tvg-logo="https://tv.kt.com//relatedmaterial/ch_logo/live/fec3895330613133542.png" group-title="SPOTV",SPOTV
https://s1f.oracle1126.duckdns.org/alive/api/url.mpd?m=url&s=spotv&i=spotv
#EXTINF:-1 tvg-id="SPOTV2" tvg-name="SPOTV2" tvg-logo="https://tv.kt.com/relatedmaterial/ch_logo/live/c9cddade01216153933.png" group-title="SPOTV",SPOTV2
https://s1f.oracle1126.duckdns.org/alive/api/url.mpd?m=url&s=spotv&i=spotv2
#EXTINF:-1 tvg-id="SBS" tvg-name="SBS" tvg-logo="https://upload.wikimedia.org/wikipedia/commons/thumb/c/ce/SBS_logo.svg/440px-SBS_logo.svg.png" group-title="지상파",SBS
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=sbs&i=S01
#EXTINF:-1 tvg-id="KBS 1TV" tvg-name="KBS 1TV" tvg-logo="https://padmin.static.kbs.co.kr/live/2025/2/3/1738538621612_433742.png" group-title="지상파",KBS 1TV
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=kbs&i=11
#EXTINF:-1 tvg-id="KBS 2TV" tvg-name="KBS 2TV" tvg-logo="https://padmin.static.kbs.co.kr/live/2025/2/3/1738538621669_433753.png" group-title="지상파",KBS 2TV
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=kbs&i=12
#EXTINF:-1 tvg-id="MBC" tvg-name="MBC" tvg-logo="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/MBC_logo.svg/440px-MBC_logo.svg.png" group-title="지상파",MBC
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=mbc&i=0
#EXTINF:-1 tvg-id="JTBC" tvg-name="JTBC" tvg-logo="https://image.tving.com/ntgs/contents/CTC/caic/CAIC0100/ko/20241024/0927/C01582.png" group-title="종합편성",JTBC
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=tving&i=C01582
#EXTINF:-1 tvg-id="tvN" tvg-name="tvN" tvg-logo="https://image.tving.com/ntgs/contents/CTC/caic/CAIC0100/ko/20241024/0937/C00551.png" group-title="연예/오락",tvN
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=tving&i=C00551
#EXTINF:-1 tvg-id="OCN" tvg-name="OCN" tvg-logo="https://image.tving.com/ntgs/contents/CTC/caic/CAIC0100/ko/20241024/0930/C07381.png" group-title="영화",OCN
https://s1f.oracle1126.duckdns.org/alive/api/url.mpd?m=url&s=tving&i=C07381
#EXTINF:-1 tvg-id="MBC 무한도전" tvg-name="MBC 무한도전" tvg-logo="https://img.pooq.co.kr/BMS/ChannelImg/23_MBC%20%EB%AC%B4%ED%95%9C%EB%8F%84%EC%A0%84.png" group-title="웨이브",MBC 무한도전
https://s1f.oracle1126.duckdns.org/alive/api/url.m3u8?m=url&s=wavve&i=PM1
            `;

            let hls, dash, player;

            // M3U 내용을 파싱하는 함수
            function parseM3u(data) {
                const lines = data.trim().split('\n');
                const playlist = [];
                for (let i = 0; i < lines.length; i++) {
                    if (lines[i].startsWith('#EXTINF:')) {
                        const metadata = lines[i];
                        const url = lines[i + 1].trim();

                        const titleMatch = metadata.match(/tvg-name="([^"]*)"/);
                        const logoMatch = metadata.match(/tvg-logo="([^"]*)"/);
                        
                        const title = titleMatch ? titleMatch[1] : metadata.split(',').slice(1).join(',').trim();
                        const logo = logoMatch ? logoMatch[1] : '';

                        if (title && url) {
                            playlist.push({ title, logo, url });
                        }
                    }
                }
                return playlist;
            }

            // 특정 채널을 재생하는 함수
            function playChannel(channel, targetElement) {
                // 기존 스트리밍 인스턴스 정리
                if (hls) hls.destroy();
                if (dash) dash.reset();

                const url = channel.url;
                
                if (url.includes('.m3u8')) {
                    hls = new Hls();
                    hls.loadSource(url);
                    hls.attachMedia(video);
                } else if (url.includes('.mpd')) {
                    dash = dashjs.MediaPlayer().create();
                    dash.initialize(video, url, true);
                } else {
                    video.src = url;
                }
                
                if (!player) {
                    player = new Plyr(video);
                    window.player = player;
                }
                player.play();

                // 'active' 클래스 관리
                document.querySelectorAll('#playlist li').forEach(li => li.classList.remove('active'));
                if (targetElement) {
                    targetElement.classList.add('active');
                }
            }

            // 플레이리스트 UI를 만드는 함수
            function buildPlaylist() {
                const channels = parseM3u(m3uContent);
                if (channels.length === 0) return;

                playlistElement.innerHTML = ''; // 목록 초기화

                channels.forEach((channel, index) => {
                    const listItem = document.createElement('li');
                    
                    const logoImg = document.createElement('img');
                    logoImg.src = channel.logo;
                    logoImg.className = 'channel-logo';
                    logoImg.alt = channel.title;
                    logoImg.onerror = () => { logoImg.style.display = 'none'; }; // 로고 로딩 실패 시 숨김

                    const titleSpan = document.createElement('span');
                    titleSpan.textContent = channel.title;

                    listItem.appendChild(logoImg);
                    listItem.appendChild(titleSpan);

                    playlistElement.appendChild(listItem);

                    listItem.addEventListener('click', () => {
                        playChannel(channel, listItem);
                    });

                    // 첫 번째 채널을 기본으로 재생
                    if (index === 0) {
                        playChannel(channel, listItem);
                    }
                });
            }

            buildPlaylist();
        });
    </script>

</body>
</html>
