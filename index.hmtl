<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>웹 TV 플레이어 (플레이리스트 포함)</title>

    <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />

    <style>
        /* 기본 페이지 스타일 */
        body {
            font-family: 'Pretendard', sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            margin: 0;
            height: 100vh;
            overflow: hidden;
        }

        /* 메인 레이아웃 (Flexbox 사용) */
        .main-container {
            display: flex;
            height: 100vh;
            width: 100vw;
        }

        /* 왼쪽: 비디오 플레이어 영역 */
        .player-wrapper {
            flex: 3; /* 3:1 비율로 왼쪽이 더 넓게 */
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #000;
            padding: 1rem;
        }

        /* 오른쪽: 플레이리스트 영역 */
        .playlist-wrapper {
            flex: 1;
            background-color: #1e1e1e;
            overflow-y: auto; /* 목록이 길어지면 스크롤 생성 */
            padding: 1rem;
            border-left: 2px solid #333;
        }

        .playlist-title {
            margin-top: 0;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #444;
            font-size: 1.2rem;
        }
        
        #playlist {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #playlist li {
            padding: 1rem 0.5rem;
            cursor: pointer;
            border-bottom: 1px solid #2c2c2c;
            transition: background-color 0.2s ease;
        }

        #playlist li:hover {
            background-color: #333;
        }
        
        /* 현재 재생 중인 항목 스타일 */
        #playlist li.active {
            background-color: #00bfff;
            color: #000;
            font-weight: bold;
        }

        /* Plyr 플레이어 커스텀 스타일 */
        :root {
            --plyr-color-main: #00bfff;
        }
    </style>
</head>
<body>

    <div class="main-container">
        <div class="player-wrapper">
            <video id="player" playsinline controls></video>
        </div>
        <div class="playlist-wrapper">
            <h2 class="playlist-title">📺 채널 목록</h2>
            <ul id="playlist"></ul>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const video = document.getElementById('player');
            const playlistElement = document.getElementById('playlist');
            // 🚨 여기에 제공하신 M3U 주소를 입력하세요.
            const m3uUrl = 'https://s1f.oracle1126.duckdns.org/alive/api/m3u';

            let hls = new Hls();
            const player = new Plyr(video);
            window.player = player;
            window.hls = hls;

            // M3U 파일을 가져와 파싱하는 함수
            async function fetchAndParsePlaylist() {
                try {
                    //  CORS 문제로 직접 fetch가 실패할 수 있습니다.
                    // 이 경우 서버에서 Access-Control-Allow-Origin 헤더 설정이 필요합니다.
                    const response = await fetch(m3uUrl);
                    if (!response.ok) {
                        throw new Error('네트워크 응답이 올바르지 않습니다.');
                    }
                    const data = await response.text();
                    
                    const lines = data.split('\n');
                    const playlist = [];
                    for (let i = 0; i < lines.length; i++) {
                        if (lines[i].startsWith('#EXTINF:')) {
                            const title = lines[i].split(',').slice(1).join(',').trim();
                            const url = lines[i + 1].trim();
                            if (title && url) {
                                playlist.push({ title, url });
                            }
                        }
                    }
                    return playlist;
                } catch (error) {
                    console.error('플레이리스트를 가져오는 데 실패했습니다:', error);
                    // fetch 실패 시 사용자에게 알림
                    playlistElement.innerHTML = `<li>플레이리스트를 불러올 수 없습니다. CORS 정책을 확인하세요.</li>`;
                    return [];
                }
            }

            // 특정 채널을 재생하는 함수
            function playChannel(url, targetElement) {
                if (Hls.isSupported()) {
                    hls.loadSource(url);
                    hls.attachMedia(video);
                } else {
                    video.src = url;
                }
                player.play();

                // 현재 재생목록 'active' 클래스 관리
                document.querySelectorAll('#playlist li').forEach(li => li.classList.remove('active'));
                if (targetElement) {
                    targetElement.classList.add('active');
                }
            }

            // 플레이리스트를 화면에 그리고 이벤트를 추가하는 함수
            async function buildPlaylist() {
                const channels = await fetchAndParsePlaylist();
                if (channels.length === 0) return;

                playlistElement.innerHTML = ''; // 기존 목록 초기화

                channels.forEach((channel, index) => {
                    const listItem = document.createElement('li');
                    listItem.textContent = channel.title;
                    listItem.dataset.url = channel.url;
                    playlistElement.appendChild(listItem);

                    listItem.addEventListener('click', () => {
                        playChannel(channel.url, listItem);
                    });

                    // 첫 번째 채널을 기본으로 재생
                    if (index === 0) {
                        playChannel(channel.url, listItem);
                    }
                });
            }

            buildPlaylist();
        });
    </script>

</body>
</html>
